boxplot(Reddito~AggregContratto, data=result, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito[AnniDaLaurea=5]~AggregContratto, data=result, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito[AnniDaLaurea=5]~AggregContratto[AnniDaLaurea=5], data=result, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito[AnniDaLaurea=1]~AggregContratto[AnniDaLaurea=1], data=result, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AggregContratto, data=result, varwidth = TRUE, par(font.axis=6, las=2, padj=0.5))
else ((f.DurataStudi - 0.482191781) - f.AnniCorso) / f.AnniCorso end as IndiceRitardo
?axis
boxplot(Reddito~AggregContratto, data=result, varwidth = TRUE, par(font.axis=6, las=2, padj.axis=0.5))
boxplot(Reddito~AggregContratto, data=result, varwidth = TRUE, par(font.axis=6, las=2, axis.padj=0.5))
res5 <- subset(result, AnniDaLaurea = 5)
boxplot(Reddito~AggregContratto, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
res1 <- subset(result, AnniDaLaurea = 1)
head res1
head(res1)
?subset
res5 <- subset(result, AnniDaLaurea == 5)
res1 <- subset(result, AnniDaLaurea == 1)
boxplot(Reddito~AggregContratto, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
bymedian <- with(res5, reorder(Reddito, -count, median))
bymedian <- with(res5, reorder(AggregContratto, -Reddito, median))
boxplot(Reddito~AggregContratto, data=bymedian, varwidth = TRUE, par(font.axis=6, las=2))
head bymedian
head(bymedian)
?reorder
boxplot(Reddito~ACreord, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
ACreord <- with(res5, reorder(AggregContratto, -Reddito, median))
boxplot(Reddito~ACreord, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
ACreord <- with(res5, reorder(AggregContratto, -Reddito, median))
head(res5)
ACreord <- with(res5, reorder(AggregContratto, -Reddito, median))
ACreord
ACreord <- with(res5, reorder(AggregContratto, -count, median))
boxplot(Reddito~AggregContratto, data=bymedian, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AggregContratto, data=res1, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AggregContratto, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
query <- "
select p.ClasseSociale, t.AnniDaLaurea, t.AnnoIndagine, c.AggregContratto, c.AttivFormImport, c.AttivitaFormaz, c.CondizioneOccupaz, f.Reddito, f.Ponderazione
from DatMarIndagine.vwFactIndagine f
join DatMarIndagine.vwDimTipoIndagine t on t.keyTipoIndagine = f.keyTipoIndagine
join DatMarIndagine.vwDimCondizioneOccupazionale c on c.keyCondOcc = f.keyCondOcc
join DatMarCommon.vwDimPersona p on p.keyPers = f.keyPers
"
result  <- sqlQuery(channel, query)
res5 <- subset(result, AnniDaLaurea == 5)
res1 <- subset(result, AnniDaLaurea == 1)
boxplot(Reddito~ClasseSociale, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~ClasseSociale, data=res1, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~ClasseSociale, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
head(res5)
boxplot(Reddito~AnnoIndagine, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AttivFormImport, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
op <- par(mar = c(10,4,4,2) + 0.1)
boxplot(Reddito~AttivFormImport, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
op <- par(mar = c(15,4,4,2) + 0.1)
boxplot(Reddito~AttivFormImport, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AggregContratto, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
library(RODBC)
channel <- odbcConnect("AlmaDWSist") # system odbc
query ="
select p.ClasseSociale, t.AnniDaLaurea, t.AnnoIndagine, c.AggregContratto, c.AttivFormImport, c.AttivitaFormaz, c.CondizioneOccupaz, f.Reddito, f.Ponderazione
from DatMarIndagine.vwFactIndagine f
join DatMarIndagine.vwDimTipoIndagine t on t.keyTipoIndagine = f.keyTipoIndagine
join DatMarIndagine.vwDimCondizioneOccupazionale c on c.keyCondOcc = f.keyCondOcc
join DatMarCommon.vwDimPersona p on p.keyPers = f.keyPers
"
result  <- sqlQuery(channel, query)
boxplot(VotoDiploma~GruppoStatistico, data=result, varwidth = TRUE, par(font.axis=6, las=2))
head(result)
boxplot(AggregContratto~Reddito, data=result, varwidth = TRUE, par(font.axis=6, las=2))
res5 <- subset(result, AnniDaLaurea == 5)
res1 <- subset(result, AnniDaLaurea == 1)
boxplot(AggregContratto~Reddito, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
head(res5)
boxplot(Reddito~AggregContratto, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AggregContratto, data=res1, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AggregContratto, data=res5, varwidth = TRUE, par(font.axis=6, las=2))
boxplot(Reddito~AggregContratto, data=res1, varwidth = TRUE, par(font.axis=6, las=2))
demo()
library(R.utils)
demo(package = .packages(all.available = TRUE))
demo(graphics)
demo(image)
demo(lattice)
demo(panel)
library(lattice=
library(lattice

library(lattice)
demo(lattice)
demo(intervals)
demo(Japanese)
demo(lm.glm)
install(ggplot2)
?library
load(ggplot2)
library(ggplot2)
utils:::menuInstallPkgs()
GetGoogleResults <- function(keyword, service, key) {
library(RCurl)
library(rjson)
base_url <- "http://ajax.googleapis.com/ajax/services/search/"
keyword <- gsub(" ", "+", keyword)
query <- paste(base_url, service, "?v=1.0&q=", keyword, sep="")
if(!is.null(key))
query <- paste(query, "&key=", key, sep="")
else
query <- paste(query, "&start=", startpos, sep="")
results <- fromJSON(getURL(query))
return(results)
}
google <- GetGoogleResults("Massimo Morelli", "web", ABQIAAAA6nK3GeNhgTx9a9IFD_PQZRSESNUkw9QdnZHwywHJGVPCsgDPkxRWDg8SK6ARAnMiNJiz0DrQ8CTMfA)
utils:::menuInstallLocal()
utils:::menuInstallPkgs()
google <- GetGoogleResults("Massimo Morelli", "web", ABQIAAAA6nK3GeNhgTx9a9IFD_PQZRSESNUkw9QdnZHwywHJGVPCsgDPkxRWDg8SK6ARAnMiNJiz0DrQ8CTMfA)
utils:::menuInstallPkgs()
google <- GetGoogleResults("Massimo Morelli", "web", ABQIAAAA6nK3GeNhgTx9a9IFD_PQZRSESNUkw9QdnZHwywHJGVPCsgDPkxRWDg8SK6ARAnMiNJiz0DrQ8CTMfA)
google <- GetGoogleResults("Massimo Morelli", "web", "ABQIAAAA6nK3GeNhgTx9a9IFD_PQZRSESNUkw9QdnZHwywHJGVPCsgDPkxRWDg8SK6ARAnMiNJiz0DrQ8CTMfA")
head(google)
google$responseData$cursor$estimatedResultCount
utils:::menuInstallLocal()
library(beeswarm)
beeswarm(time_survival ~ event_survival, data = breast,
method = 'smile',
pch = 16, pwcol = as.numeric(ER),
xlab = '', ylab = 'Follow-up time (months)',
labels = c('Censored', 'Metastasis'))
legend('topright', legend = levels(breast$ER),
title = 'ER', pch = 16, col = 1:2)
Breast
load(C:\Programmi\R\R-2.12.2\library\beeswarm\data\breast.RData)
load("C:\Programmi\R\R-2.12.2\library\beeswarm\data\breast.RData")
load('C:\Programmi\R\R-2.12.2\library\beeswarm\data\breast.RData')
load("C:/Programmi/R/R-2.12.2/library/beeswarm/data/breast.RData")
breast
if(!require(beeswarm)) install.packages(beeswarm)
beeswarm(time_survival ~ event_survival, data = breast,
method = 'smile',
pch = 16, pwcol = as.numeric(ER),
xlab = '', ylab = 'Follow-up time (months)',
labels = c('Censored', 'Metastasis'))
legend('topright', legend = levels(breast$ER),
title = 'ER', pch = 16, col = 1:2)
beeswarm(time_survival ~ event_survival, data = breast,
method = 'smile',
pch = 16, pwcol = as.numeric(ER),
xlab = '', ylab = 'Follow-up time (months)',
labels = c('Censored', 'Metastasis'))
boxplot(time_survival ~ event_survival, data = breast, add = T,  col="#0000ff22")  # my thanks goes to Greg Snow for the tip on the transparency colour (from 2007): https://stat.ethz.ch/pipermail/r-help/2007-October/142934.html
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(forecast)
utils:::menuInstallPkgs()
utils:::menuInstallLocal()
library(forecast)
chooseCRANmirror()
chooseCRANmirror()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library(forecast)
statepopdata <- read.csv(
"http://www.census.gov/popest/national/files/NST_EST2009_ALLDATA.csv")
head(statepopdata)
statepopdata <- read.csv(
statepopdata$NAME
popnames = as.character(statepopdata$NAME)
pop2000 = statepopdata$CENSUS2000POP
popdich = ifelse(pop2000 < 3000000, "red", "blue")
popdich
pop2000
library(maps)
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library(maps)
library(mapproj)
data(state)
mapnames = map("state", plot=FALSE)$names
mapnames.state = ifelse(regexpr(":",mapnames) < 0,
mapnames, substr(mapnames, 1, regexpr(":",mapnames)-1))
popnames.lower = tolower(popnames)
popnames.lower
cols= popdich[match(mapnames.state,popnames.lower)]
map("state",fill=TRUE,col=cols,proj="albers",param=c(35,50))
title("48 States by population")
cols
demo(lattice)
demo()
demo(package = .packages(all.available = TRUE))
getNews2 <- function(symbol, number){
# load libraries
require(XML); require(plyr); require(stringr); require(lubridate);
# construct url to news feed rss and encode it correctly
url.b1 = 'http://www.google.com/finance/company_news?q='
url    = paste(url.b1, symbol, '&output=rss', "&start=", 1,
"&num=", number, sep = '')
url    = URLencode(url)
# parse xml tree, get item nodes, extract data and return data frame
doc   = xmlTreeParse(url, useInternalNodes = T);
nodes = getNodeSet(doc, "//item");
mydf  = ldply(nodes, as.data.frame(xmlToList))
# clean up names of data frame
names(mydf) = str_replace_all(names(mydf), "value\\.", "")
# convert pubDate to date-time object and convert time zone
mydf$pubDate = strptime(mydf$pubDate,
format = '%a, %d %b %Y %H:%M:%S', tz = 'GMT')
mydf$pubDate = with_tz(mydf$pubDate, tz = 'America/New_york')
# drop guid.text and guid..attrs
mydf$guid.text = mydf$guid..attrs = NULL
return(mydf)
}
getNews2('msft', 10)
getNews2('MSFT', 10)
?str_replace
?str_replace_all
??str_replace_all
??str_replace
??str_replace
getNews2('MSFT', 10)
install stringr
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
chooseCRANmirror()
utils:::menuInstallPkgs()
getNews2('MSFT', 10)
getNews2('MSFT', 1)
update.packages(ask='graphics')
getNews2('MSFT', 1)
load lubridate
utils:::menuInstallPkgs()
getNews2('MSFT', 1)
getNews2('MSFT', 10)
myfunction <- function(ticker) {
require(ggplot2);
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", ticker, "&a=07&b=19&c=2004&d=07&e=13&f=2015&g=d&ignore=.csv", sep="");
mydata <- read.csv(url);
mydata$Date <- as.Date(mydata$Date);
myplot <- qplot(Date, Close, data=mydata, geom=c("line", "smooth"), main=ticker);
print(myplot);
}
myfunction(GOOG)
myfunction("GOOG")
q()
q()
x <-rnorm(100, 0 1)
x <-rnorm(100, 0, 1)
plot(x)
x <-dnorm(100, 0, 1)
plot(x)
x <-rnorm(100, 0, 1)
x <-rnorm(100)
x
summary(x)
x <-rnorm(10)
print(x)
set.seed(20)
x <-rnorm(100)
x <-rnorm(100)
set.seed(20)
x <-rnorm(100)
y <-rnorm(100, 0, 2)
y <- 0.5 + 2 *x + e
set.seed(20)
x <-rnorm(100)
e <-rnorm(100, 0, 2)
y <- 0.5 + 2 *x + e
plot(x, y)
e <- rnorm(100, 0, 1)
x <- 1:100
y <- 1.5 - 3 * x + e
plot(x, y)
x <- rnorm(100)
hist(x)
y<-rnorm(100)
plot(x, y)
z<-rnorm(100)
par(mar = c(2, 2, 2, 2)
)
plot(x, y)
par(mar = c(4, 4, 2, 2)
)
plot(x, y)
plot(x, y, pch=20)
plot(x, y, pch=19)
plot(x, y, pch=2)
plot(x, y, pch=4)
pchshow()
example(symbols)
pchshow()
pchShow()
example(plot)
x <- rnorm(100)
y<-rnorm(100)
plot(x, y, pch=4)
plot(x, y, pch=20)
title("Scatterlplot")
text(-2, -2, "Label")
legend("topleft", legend="Data", pch=20)
fit<- ln(y ~ y)
fit<- lm(y ~ x)
abline(fit)
abline(fit, lwd = 3))
abline(fit, lwd = 3
)
plot(x, y, xlab="Wei", ylab="Hei", main = "Scatterplot", pch=20)
legend("topright", legend="Data", pch=20)
fit<- lm(y ~ x)
abline(fit, lwd = 3, col="red")
z<-rpois(100, 2)
par(mfrow=c(2,1))
plot(x, y, pch=20)
plot(x, z, pch=19)
par("mar")
par(mar=c(2,2,1,1))
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mfrow=c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2,50)
g
g <- gl(2,50, label=c("Male","Female"))
g
str(g)
plot(x,y)
plot(x,y, type="n")
points(x[g="Male"], y[g="Male"])
points(x[g=="Male"], y[g=="Male"])
points(x[g=="Male"], y[g=="Male"], col="Green")
points(x[g=="Female"], y[g=="Female"], col="blue")
points(x[g=="Female"], y[g=="Female"], col="blue", pch=19)
library(lattice)
library(nlme)
xplot(distance ~ age | Subject, data=Orthodont, type="b")
xyplot(distance ~ age | Subject, data=Orthodont, type="b")
q()
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrame
dataFrameSubset <- dataFrame[dataFrame$heightsCM > 188]
dataFrameSubset <- dataFrame[dataFrame$heightsCM > 188, ]
dataFrameSubset
dataFrameSubset
mean(dataFrameSubset$weightsK)
?rcauchy
set.seed(41)
cau <- rcauchy(100)
set.seed(415)
sample(cau,size=10,replace=TRUE)
set.seed(41);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset <- dataFrame[dataFrame$heightsCM > 188, ]
dataFrameSubset
mean(dataFrameSubset$weightsK)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset <- dataFrame[dataFrame$heightsCM > 188, ]
dataFrameSubset
mean(dataFrameSubset$weightsK)
set.seed(41)
cau <- rcauchy(100)
set.seed(415)
sample(cau,size=10,replace=TRUE)
sample(cau,size=10,replace=TRUE)
set.seed(41)
cau <- rcauchy(100)
set.seed(415)
sample(cau,size=10,replace=TRUE)
sample(cau,size=10,replace=TRUE)
sample(cau,size=10,replace=TRUE)
set.seed(41)
cau <- rcauchy(100)
set.seed(415)
sample(cau,size=10,replace=TRUE)
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 +100
mySqrt <- sqrt(z-x=)
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0,10,100)
1:20
pi:10
15:1
`:
)
`
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(0.5,55,-10, 6)
c(0.5,55L,-10, 6)
num_vect <- c(0.5,55,-10, 6)
tf <- num_vect <1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Massimo")
my_name<- c(my_char, "Massimo")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
install.packages("sp")
library(sp)
con <- url("http://gadm.org/data/rda/ITA_adm2.RData")
print(load(con))
close(con)
language <- c("german", "german", "german","german", "german","german","french", "french", "german","german","french", "french",
"german", "french","german","german", "german","german","german", "german", "german","italian","german","french", "french","german","german")
gadm$language <- as.factor(language)
col = rainbow(length(levels(gadm$language)))
spplot(gadm, "language", col.regions=col, main="Swiss Language Regions")
#--------------------
names(gadm)
col = rainbow(length(levels(gadm$NAME_2)))
spplot(gadm, "NAME_2", col.regions=col, main="Province")
gadm
str(gadm)
con <- url("http://biogeo.ucdavis.edu/data/gadm2/R/DEU_adm2.RData")
print(load(con))
str(gadm)
col = rainbow(1:16)
spplot(gadm, "NAME_2", col.regions=col, main="title")
unique(gadm$col.regions)
language <- c("german", "german", "german","german", "german","german","french", "french", "german","german","french", "french",
"german", "french","german","german", "german","german","german", "german", "german","italian","german","french", "french","german","german")
gadm$language <- as.factor(language)
col = rainbow(1:40)
spplot(gadm, "NAME_2", col.regions=col, main="title")
?ssplot
?ssplot
?sp
spplot(gadm, "NAME_2",
col.regions = colorRampPalette(c("red","orange",  "yellow", "lightblue", "blue", "purple")), main="title")
spplot(gadm, "NAME_2", main="title")
?spplot
spplot(gadm, names.attr="NAME_2", main="title")
names(gadm)
str(gadm)
head(gadm)
data(meuse.grid)
gridded(meuse.grid)=~x+y
meuse.grid$g = factor(sample(letters[1:5], 3103, replace=TRUE),levels=letters[1:10])
meuse.grid$f = factor(sample(letters[6:10], 3103, replace=TRUE),levels=letters[1:10])
spplot(meuse.grid, c("f","g"))
spplot(meuse.grid, c("f","g"), col.regions=bpy.colors(10))
library(RColorBrewer)
library(RColorBrewer)
install.packages("RColorBrewer")
library(sp)
library(RColorBrewer)
# get spatial data for Germany on county level
con <- url("http://gadm.org/data/rda/DEU_adm3.RData")
print(load(con))
close(con)
# plot Germany with random colors
col = rainbow(length(levels(gadm$NAME_3)))
spplot(gadm, "NAME_3", col.regions=col, main="German Regions",
colorkey = FALSE, lwd=.4, col="white")
col = rainbow(length(levels(gadm$NAME_2)))
spplot(gadm, "NAME_2", col.regions=col, main="German Regions",
colorkey = FALSE, lwd=.4, col="white")
dec=",", stringsAsFactors=F)
setwd("~\\Google Drive\\Data Science\\08_PracticalMachineLearning\\PML_Project\\code\\raw")
dat <-   read.csv("..\\..\\data\\pml-training.csv")
proof <- read.csv("..\\..\\data\\pml-testing.csv")
str(dat$classe)
names(dat)[160]
install.packages("caret")
